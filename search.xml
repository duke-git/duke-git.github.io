<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于vue-cli-plugin-electron-builder构建Electron + vue-cli3.0的桌面应用开发]]></title>
    <url>%2F2019%2F08%2F21%2Fvue-electron-dev-post1%2F</url>
    <content type="text"><![CDATA[​ 概述 ​ 使用electron和vue结合可以构建强大桌面应用。目前，桌面应用开发中electron和vue和开发框架多使用electron-vue。electron-vue 充分利用 vue-cli 作为脚手架工具，加上拥有 vue-loader 的 webpack、electron-packager 或是 electron-builder，以及一些最常用的插件，如vue-router、vuex 等等。但是，electron-vue是vue-cli2的版本，且长久没有更新。vue-cli3已经面世很久。其配置简洁，文件结构更加合理。本文展示最新vue和electron框架：vue-cli-plugin-electron-builder，结合vue-cli3创建一个计算个人身体指数（BMI）的桌面应用。 ​ 首先了解vue-cli-plugin-electron-builder工具点击这里 ​ myBMI桌面应用项目：git仓库地址 欢迎start myBMI安装文件下载 欢迎下载使用 ​ 应用截图： 一，搭建项目 用vue-cli3创建一个项目。 vue create my-bmi-desktop 安装vue-cli-plugin-electron-builder生成器。 创建完成后cd 到项目目录，添加vue-cli-plugin-electron-builder生成器。 cd electron-vue-my-bmi-desktop vue add electron-builder 项目工程目录 参考下图说明： 二，项目构建 设置构建参数：vue-cli-plugin-electron-builder打包构建用的是electron-builder。构建参数在vue.config.js中pluginOptions 》electronBuilder 》builderOptions选项中设置。以下是myBmi项目的构建参数： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162electronBuilder: &#123; chainWebpackMainProcess: config =&gt; &#123; // Chain webpack config for electron main process only &#125;, chainWebpackRendererProcess: config =&gt; &#123; // Chain webpack config for electron renderer process only // The following example will set IS_ELECTRON to true in your app config.plugin('define').tap(args =&gt; &#123; args[0]['IS_ELECTRON'] = true return args &#125;) &#125;, // Use this to change the entrypoint of your app's main process mainProcessFile: 'src/background.js', // Provide an array of files that, when changed, will recompile the main process and restart Electron // Your main process file will be added by default mainProcessWatch: [], // [1.0.0-rc.4+] Provide a list of arguments that Electron will be launched with during "electron:serve", // which can be accessed from the main process (src/background.js). // Note that it is ignored when --debug flag is used with "electron:serve", as you must launch Electron yourself // Command line args (excluding --debug, --dashboard, and --headless) are passed to Electron as well // mainProcessArgs: ['--arg-name', 'arg-value'] builderOptions: &#123; "appId": "com.mybmi.app", "productName": "myBMI身体指数计算器",//项目名，也是生成的安装文件名，即aDemo.exe "copyright": "Copyright © 2019 柳叶刀",//版权信息 "directories": &#123; "output": "./dist"//输出文件路径 &#125;, "asar": false, "win": &#123;//win相关配置 "icon": "./public/app.ico",//图标，当前图标在根目录下，注意这里有两个坑 "target": [ &#123; "target": "nsis",//利用nsis制作安装程序 "arch": [ "x64",//64位 "ia32"//32位 ] &#125; ] &#125;, "nsis": &#123; "oneClick": false, // 是否一键安装 "allowElevation": true, // 允许请求提升。 如果为false，则用户必须使用提升的权限重新启动安装程序。 "allowToChangeInstallationDirectory": true, // 允许修改安装目录 "installerIcon": "./public/app.ico",// 安装图标 "uninstallerIcon": "./public/app.ico",//卸载图标 "installerHeaderIcon": "./public/app.ico", // 安装时头部图标 "createDesktopShortcut": true, // 创建桌面图标 "createStartMenuShortcut": true,// 创建开始菜单图标 "shortcutName": "myBMI", // 图标名称 &#125;, "publish": [ &#123; "provider": "generic", "url": "http://**.**.**.**:3001/download/",//隐藏版本服务器地址 &#125; ] &#125;&#125; 构建项目: 构建项目执行命令npm run electron:build。执行会生成dist及electron_dist构建目录。dis构建输出目录由vue.config.js文件builderOptions》directories》output选项指定。目录中包含可执行程序包和程序安装文件（此处build平台为windows）。参考下图： ![](http://pwkrg9wgk.bkt.clouddn.com/my-bmi-build-directory.png) 三，遗留问题 electron打包后安装文件体积过大（103M），后期会focus在减少打包文件体积。 为应用加上自动更新（electron-updater）。 欢迎浏览区讨论]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Electron, Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转：javascript工作原理 1 引擎，运行时，调用堆栈]]></title>
    <url>%2F2019%2F08%2F20%2Fjavascript_theory_1%2F</url>
    <content type="text"><![CDATA[原文请查阅这里，本文采用知识共享署名 4.0 国际许可协议共享，BY Troland。 这是 JavaScript 工作原理的第一章。本章会对语言引擎，运行时，调用栈做一个概述。 随着 JavaScript 越来越流行，团队也利用其在他们诸如前端，后端，混合 apps，嵌入设备以及更多设备等开发栈中的不同层面的支持。 本章系列的第一章，本系列旨在深入 JavaScript 并理解它是如何运行的：我们认为在了解 JavaScript 的构建模块和它们是如何捏合在一起工作之后你将会写出更好的代码和 apps。我们将会分享一些当在创建 SessionStack 时候的经验法则，SessionStack 是一个轻量级的 JavaScript 程序它拥有强壮性和高性能的优点以保持竞争力。 正如 GitHut stats 所显示的那样，JavaScript 的活跃库和总推送数在 Github 排名第一。其它方面的表现也不会比其它语言落下太多。 (点击查看最新 Github 语言统计) 如果工程非常依赖于 JavaScript，那么这意味着开发者不得不使用 JavaScript 和其语言生态提供的一切事物，为了能够创造出很酷的软件，就得更加深入地了解 JavaScript 语言的内部工作机制。 事实上，有很多开发者在每天日常开发中都会使用 JavaScript 但是却不了解其底层的知识。 概述几乎所有人都已经听说过 V8 引擎的概念，并且很多人知道 JavaScript 是单线程的或者说是使用回调队列的。 在本章中，我将会详细地过一下这些概念并解释 JavaScript 的工作原理。有赖于了解这些细节，通过合理地使用提供的 APIs 你将可能写出更好的，非阻塞的程序。 如果你是新手，本文将会帮助你理解为什么和其它语言比较 JavaScript 是不可思议的。 如果你是一个经验丰富的 JavaScript 开发者，但愿，它将会让你更加深入地了解 JavaScript 运行时工作原理。 JavaScript 引擎谷歌 V8 引擎是流行的 JavaScript 引擎之一。V8 引擎在诸如 Chrome 和 Node.js 内部使用。这里有一个简单的视图来描绘其大概。 引擎包括两个主要组件： 动态内存管理 － 在这里分配内存 调用栈－这里代码执行即是你的堆栈结构 运行时几乎每个 JavaScript 开发者都使用过一些浏览器 API(比如 setTimeout)。然而这些 API并不是引擎所提供的。 那么它们从何而来？ 事实上这个情况有点复杂呃。。 所以，除了引擎但是实际上还有更多其它方面的东西。有被称为 Web API 的东西，这些 Web API 是由浏览器提供的，比如 DOM,AJAX,setTimeout 以及其它。 于是乎，就有了流行的事件循环和回调队列。 调用栈JavaScript 只是一个单线程的编程语言，这意味着它只有一个调用栈。这样它只能一次做一件事情。 调用栈是一种数据结构，里面会记录我们在程序中的大概位置。当执行进入一个函数，把它置于栈的顶部。如果从函数中返回则从栈顶部移除函数。这就是调用栈所能够做的事情。 举个栗子。查看如下代码： 12345678910function multiply(x, y) &#123; return x * y;&#125;function printSquare(x) &#123; var s = multiply(x, x); console.log(s);&#125;printSquare(5); 当引擎开始执行这段代码的时候，调用栈会被清空。之后，产生如下步骤： 调用栈中的每个入口被称为堆栈结构。 当抛出异常的时候这正好是堆栈追踪是如何被构造出来的－当发生异常的时候这基本上是调用栈的状态。看下如下代码： 12345678910111213function foo() &#123; throw new Error('SessionStack will help you resolve crashes:)');&#125;function bar() &#123; foo();&#125;function start() &#123; bar();&#125;start(); 如果在 Chrome 中执行（假设代码在 foo.js 的文件中），将会产生如下的堆栈追踪： “堆栈溢出”－当你达到最大调用栈大小的时候发生。这种情况相当容易发生，特别是当你使用递归而没有仔细地检查代码的时候。查看下如下代码： 12345function foo() &#123; foo();&#125;foo(); 当引擎开始执行这段代码的时候，它开始调用 foo 函数。这个函数，然而，会递归并开始调用其自身而没有任何结束条件。所以在每步执行过程中，调用堆栈会反复地添加同样的函数。执行过程如下所示： 在某一时刻，然而，调用堆栈中的函数调用次数超过了调用堆栈的实际大小，这样浏览器决定抛出错误的动作，如下所示： 在单线程中运行代码会相当轻松因为你不用处理多线程环境中产生的一些复杂情况，比如死锁。 但是在单线程运行代码也会有相当的限制。由于 JavaScript 只有一个调用栈，如果运行很慢会发生什么？ 并发和事件循环当你在调用栈中有函数为了完成运行需要消耗大量的时间的时候会发生什么？例如，想象一下你想要在浏览器用 JavaScript 来执行一些复杂的图像转化。 你或许会问－为什么这也是个问题？问题是这样的当调用栈有函数需要执行，浏览器实际上不能做其它任何事－它被阻塞了。这意味着浏览器不能够执行渲染，它不能够运行其它代码，它卡住了。如果你想要在 app 中拥有酷炫的流畅 UI 体验，这将会是个问题。 这不会是唯一的问题。一旦浏览器开始在调用栈中执行如此多的任务，浏览器将会在相当一段时间内停止交互。大多数浏览器会抛出一个错误，询问你是否关闭网页。 现在，这并不是最好的用户体验，难道不是吗？ 因此，如何不阻塞 UI 且不让浏览器停止响应来执行运行缓慢的代码呢？使用异步回调。 这将会在 『JavaScript 工作原理』 第二章：『在V8 引擎中如何写最佳代码的 5 条小技巧』中进行详细阐述。]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
